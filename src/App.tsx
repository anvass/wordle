import { useState } from 'react';
import Keyboard from './components/Keyboard';
import Grid from './components/Grid';
import { GameState } from './types';
import words from './dict.json';
import { COLS_COUNT, ROWS_COUNT } from './constants';
import Modal from './components/Modal';
import Header from './components/Header';
import Footer from './components/Footer';
import { AiOutlineEnter } from 'react-icons/ai';
import { FaDeleteLeft } from 'react-icons/fa6';

type ModalName = 'help' | 'success' | 'failed' | 'config';

function App() {
  const [gameState, setGameState] = useState<GameState>({
    enteredWords: [],
    currentWord: '',
    targetWord: words[Math.floor(Math.random() * words.length)],
  });

  const [modalName, setModalName] = useState<ModalName | null>(null);

  const handleLetterEnter = (key: string) => {
    if (gameState.currentWord.length < COLS_COUNT) {
      setGameState((prevState) => ({
        ...prevState,
        currentWord: prevState.currentWord + key,
      }));
    }
  };

  const handleLetterRemove = () => {
    if (gameState.currentWord.length > 0) {
      setGameState((prevState) => ({
        ...prevState,
        currentWord: prevState.currentWord.slice(0, -1),
      }));
    }
  };

  console.log(gameState);

  const handleResetGame = () => {
    setGameState(() => ({
      enteredWords: [],
      currentWord: '',
      targetWord: words[Math.floor(Math.random() * words.length)],
    }));
    setModalName(null);
  };

  const handleWordEnter = () => {
    const currentWord = gameState.currentWord.toLowerCase();
    const targetWord = gameState.targetWord.toLowerCase();

    if (
      currentWord.length !== COLS_COUNT ||
      gameState.enteredWords.length === ROWS_COUNT
    ) {
      return;
    }

    if (!words.includes(currentWord)) {
      alert('–í —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ!');
      setGameState((prevState) => ({
        ...prevState,
        currentWord: '',
      }));
      return;
    }

    if (currentWord === targetWord) {
      setGameState((prevState) => ({
        ...prevState,
        enteredWords: [...prevState.enteredWords, currentWord],
        currentWord: '',
      }));
      setModalName('success');
      return;
    }

    if (gameState.enteredWords.length < ROWS_COUNT - 1) {
      setGameState((prevState) => ({
        ...prevState,
        enteredWords: [...prevState.enteredWords, currentWord],
        currentWord: '',
      }));
    } else {
      setModalName('failed');
      return;
    }
  };

  const handleHelpClick = () => setModalName('help');

  return (
    <>
      <Header onHelpClick={handleHelpClick} />
      <Grid gameState={gameState} />
      <Keyboard
        gameState={gameState}
        onLetterEnter={handleLetterEnter}
        onLetterRemove={handleLetterRemove}
        onWordEnter={handleWordEnter}
      />
      <ModalContainer
        modalName={modalName}
        setModalName={setModalName}
        onReset={handleResetGame}
      />
      <Footer onHelpClick={handleHelpClick} />
    </>
  );
}

function ModalContainer({
  modalName,
  setModalName,
  onReset,
}: {
  modalName: null | string;
  // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
  setModalName: Function;
  // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
  onReset: Function;
}) {
  if (!modalName) {
    return null;
  }
  if (modalName === 'help') {
    return (
      <Modal onClose={() => setModalName(null)} title={'–ü–æ–º–æ—â—å'}>
        <div className="text-left flex flex-col gap-4">
          <div>
            <p>
              –í–æ—Ä–¥–ª - —ç—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ
              —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤ –∑–∞ 6 –ø–æ–ø—ã—Ç–æ–∫.
            </p>
          </div>
          <div>
            <p className="mb-2 font-semibold text-center">–ö–∞–∫ –∏–≥—Ä–∞—Ç—å?</p>
            <ol>
              <li>–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –∏–∑ –ø—è—Ç–∏ –±—É–∫–≤</li>
              <li>
                –ù–∞–∂–º–∏—Ç–µ
                <span className="inline-block px-1 align-middle">
                  <FaDeleteLeft />
                </span>
                , –µ—Å–ª–∏ –æ—à–∏–±–ª–∏—Å—Ç—å –ø—Ä–∏ –≤–≤–æ–¥–µ
              </li>
              <li>
                –ù–∞–∂–º–∏—Ç–µ
                <span className="inline-block px-1 align-middle">
                  <AiOutlineEnter />
                </span>
                –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
              </li>
              <li>
                <p>
                  –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏ –±—É–∫–≤—ã –±—É–¥—É—Ç –ø–æ–¥—Å–≤–µ—á–µ–Ω—ã —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏:
                </p>
                <ul>
                  <li>
                    üü¢ –ó–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –±—É–∫–≤–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º
                    –º–µ—Å—Ç–µ –≤ —Å–ª–æ–≤–µ
                  </li>
                  <li>
                    üü° –ñ—ë–ª—Ç—ã–π —Ü–≤–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –±—É–∫–≤–∞ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ, –Ω–æ —Å—Ç–æ–∏—Ç
                    –Ω–µ —Ç–∞–º
                  </li>
                  <li>
                    ‚¨ú –°–µ—Ä—ã–π —Ü–≤–µ—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Ç–∞–∫–æ–π –±—É–∫–≤—ã –Ω–µ—Ç –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º
                    —Å–ª–æ–≤–µ
                  </li>
                </ul>
              </li>
            </ol>
          </div>
          <div>
            <p className="mb-2 font-semibold text-center">–£—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã</p>
            <ul>
              <li>
                –í—ã –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç–µ, –µ—Å–ª–∏ —É–≥–∞–¥–∞–µ—Ç–µ —Å–ª–æ–≤–æ —Ä–∞–Ω—å—à–µ, —á–µ–º –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è
                –ø–æ–ø—ã—Ç–∫–∏
              </li>
              <li>–ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –∏–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–æ–∏–≥—Ä—ã—à–µ–º</li>
            </ul>
          </div>
        </div>
        <div className="flex mt-4">
          <button
            onClick={() => {
              onReset();
            }}
            className="w-full p-3 rounded-md text-lg bg-blue-600 text-white uppercase hover:bg-blue-700 transition-colors cursor-pointer"
          >
            –í—Å–µ –ø–æ–Ω—è—Ç–Ω–æ
          </button>
        </div>
      </Modal>
    );
  }
  if (modalName === 'success') {
    return (
      <Modal onClose={() => setModalName(null)} title={'–ü–æ–±–µ–¥–∞!'}>
        <p>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</p>
        <p>–í—ã –æ—Ç–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ!</p>
        <div className="flex mt-4">
          <button
            onClick={() => {
              onReset();
            }}
            className="w-full p-3 rounded-md text-lg bg-blue-600 text-white uppercase hover:bg-blue-700 transition-colors cursor-pointer"
          >
            –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
          </button>
        </div>
      </Modal>
    );
  }
  if (modalName === 'failed') {
    return (
      <Modal onClose={() => setModalName(null)} title={'–ù–µ—É–¥–∞—á–∞'}>
        <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –æ—Ç–≥–∞–¥–∞–ª–∏!</p>
        <p>–ü–æ–ø—Ä–æ–±—É–µ—Ç–µ —Å–Ω–æ–≤–∞?</p>
        <div className="flex mt-4">
          <button
            onClick={() => onReset()}
            className="w-full p-3 rounded-md text-lg bg-blue-600 text-white uppercase hover:bg-blue-700 transition-colors cursor-pointer"
          >
            –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
          </button>
        </div>
      </Modal>
    );
  }
}

export default App;
